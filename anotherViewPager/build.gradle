apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jetbrains.dokka-android'

def gitHubUsername = "kristiyanP"
def gitHubProjectName = "anotherViewPager"

// start - do not modify this if your project is on github
def siteUrl = "https://github.com/${gitHubUsername}/${gitHubProjectName}"
def gitUrl = siteUrl + '.git'
def bugTrackerUrl = siteUrl + '/issues/'
def projectName = gitHubProjectName
// end - do not modify this if your project is on github

def projectDesc = "A view pager with tabs and without fragments to avoid lifecycle handling"
def projectGroup = "io.kri"
def projectLicenses = ["Apache-2.0"]
def projectLicenseUrl = "http://www.apache.org/licenses/LICENSE-2.0.txt"
def projectKeywords = ['viewpager', 'no fragment', 'view', 'pager', 'tabbed', 'tab']
def developerFullName = "Kristiyan Petrov"
group = projectGroup
version = "1.0.2"

android {
    compileSdkVersion sdkVersion
    buildToolsVersion toolsVersion
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion sdkVersion
        versionCode 1
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        warning 'InvalidPackage'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-beta02', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.+"
    implementation 'com.google.android.material:material:1.0.0'
}

// add the following information to the file: local.properties situated in the parent directory of
// where this file is:
//
// bintray.user=yourusername
// bintray.apikey=api key got from the bintray profile
//
// be sure to add local.properties to the .gitignore!

Properties properties = new Properties()
if (project.rootProject.file("local.properties").exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

install {
    repositories.mavenInstaller {
        pom.project {
            name projectName
            description projectDesc
            packaging 'aar'
            groupId projectGroup
            version version
            url siteUrl
            licenses {
                license {
                    name projectLicenses[0]
                    url projectLicenseUrl
                }
            }
            developers {
                developer {
                    id properties.getProperty("bintray.user")
                    name developerFullName
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl

            }
        }
    }
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = projectName
        desc = projectDesc
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        issueTrackerUrl = bugTrackerUrl
        licenses = projectLicenses
        labels = projectKeywords
        publicDownloadNumbers = true
        publish = true
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task dokkaDoc() {
    dependsOn createApiDoc("genJavaDoc", "html", "$buildDir/kDoc")
    dependsOn createApiDoc("genKDoc", "javadoc", "$buildDir/jDoc")
}

def createApiDoc(def name, def format, def dir) {
    return tasks.create(name, org.jetbrains.dokka.gradle.DokkaAndroidTask) {
        outputFormat = format
        outputDirectory = dir
        skipEmptyPackages = true // Do not create index pages for empty packages
    }
}

task jdocJar(type: Jar, dependsOn: dokkaDoc) {
    classifier = 'javadoc'
    from "$buildDir/jDoc"
}

task kdocJar(type: Jar, dependsOn: dokkaDoc) {
    classifier = 'kdoc'
    from "$buildDir/kDoc"
}

artifacts {
    archives kdocJar
    archives jdocJar
    archives sourcesJar
}

